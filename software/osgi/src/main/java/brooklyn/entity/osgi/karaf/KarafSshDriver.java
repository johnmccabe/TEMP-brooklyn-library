package brooklyn.entity.osgi.karaf;

import brooklyn.entity.basic.lifecycle.JavaStartStopSshDriver;
import brooklyn.entity.webapp.PortPreconditions;
import brooklyn.location.basic.SshMachineLocation;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import static java.lang.String.format;

public class KarafSshDriver extends JavaStartStopSshDriver {

    // TODO getJmxJavaSystemProperties(), don't set via JAVA_OPTS; set ourselves manually
    // (karaf reads from props files)
    // but do set "java.rmi.server.hostname"

    public KarafSshDriver(KarafContainer entity, SshMachineLocation machine) {
        super(entity, machine);
    }

    @Override
    public KarafContainer getEntity() {
        return (KarafContainer) super.getEntity();
    }

    @Override
    protected String getLogFileLocation() {
        return format("{%s}/data/karaf.out", getRunDir());
    }

    protected String getUntarredDirName() {
        return format("apache-karaf-%s", getVersion());
    }

    @Override
    public void install() {
        String url = format("http://apache.mirror.anlx.net/karaf/%s/apache-karaf-%s.tar.gz",getVersion(),getVersion());
        String saveAs = format("apache-karaf-%s.tar.gz",getVersion());
        newScript(INSTALLING).
                failOnNonZeroResultCode().
                body.append(
                format("curl -L \"%s\" -o %s || exit 9", url, saveAs),
                format("tar xzfv %s", saveAs)
        ).execute();
    }

    @Override
    public void customize() {
        Map<String, Object> ports = new HashMap<String, Object>();
        ports.put("jmxPort", getJmxPort());
        ports.put("rmiPort", getRmiPort());

        PortPreconditions.checkPortsValid(ports);
        newScript(CUSTOMIZING).
                body.append(
                format("cd %s", getRunDir()),
                format("cp -R %s/%s/{bin,etc,lib,system,deploy} . || exit $!", getInstallDir(), getUntarredDirName()),
                format("sed -i.bk 's/rmiRegistryPort = 1099/rmiRegistryPort = %s/g' etc/org.apache.karaf.management.cfg", getJmxPort()),
                format("sed -i.bk 's/rmiServerPort = 44444/rmiServerPort = %s/g' etc/org.apache.karaf.management.cfg", getRmiPort())
        ).execute();
    }

    @Override
    public void launch() {
        Map<String, Object> flags = new HashMap<String, Object>();
        flags.put("usePidFile", true);

        newScript(flags, LAUNCHING).
                body.append(
                "nohup ./bin/start"
        ).execute();
    }

    @Override
    public boolean isRunning() {
        // TODO Can we use the pidFile, auto-generated by launch?

        Integer pid = entity.getAttribute(KarafContainer.KARAF_PID);
        // This method is called on startup, before JMX is initialised, so pid won't always be available.
        if (pid != null) {
            return newScript(CHECK_RUNNING).
                    body.append(
                    format("ps aux | grep 'karaf' | grep %s > /dev/null", pid)
            ).execute() == 0;
        } else {
            // Simple method isn't available, use pid in instance.properties.
            return newScript(CHECK_RUNNING).
                    body.append(
                    format("cd %s/instances/",getRunDir()),
                    "[ $(uname) = \"Darwin\" ] && pid=$(sed -n -e 's/.*pid=\\([0-9]*\\)$/\\1/p' instance.properties) || pid=$(sed -r -n -e 's/.*pid=([0-9]*)$/\\1/p' instance.properties)",
                    "ps aux | grep 'karaf' | grep $(echo ${pid:-X}) > /dev/null"
            ).execute() == 0;
        }
    }

    @Override
    public void stop() {
        newScript(STOPPING).
                body.append(
                format("%s/bin/stop",getRunDir())
        ).execute();
    }

    @Override
    protected List<String> getCustomJavaConfigOptions() {
        List<String> result = new LinkedList<String>();
        result.addAll(super.getCustomJavaConfigOptions());
        result.add("-Xms200m");
        result.add("-Xmx800m");
        result.add("-XX:MaxPermSize=400m");
        return result;
    }

    // FIXME Playing around / experimenting with these jmx system properties to try to get it to work!
    // With com.sun.management.jmxremote.port, then the Karaf container won't start at all; with that one removed then we just get "Not connected to JMX for entity Venue[id=ad7a6e47-e738-4687-b3bf-b9ad3aae449d,displayName=Venue:ad7a]"
    @Override
    protected Map<String,?> getJmxJavaSystemProperties() {
//        Map result = super.getJmxJavaSystemProperties()
//        result.remove("com.sun.management.jmxremote.port")
//        return result

        Map<String,Object> result  = new HashMap<String,Object>();
        result.put("java.rmi.server.hostname",getMachine().getAddress().getHostName());
        return result;
    }
}
