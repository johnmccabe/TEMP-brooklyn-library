package brooklyn.entity.proxy.nginx;

public class ProxySslConfig {

    /** 
     * url's for the SSL certificates required at the server
     * <p>
     * nginx settings:
     *     ssl                  on;
     *     ssl_certificate      www.example.com.crt;
     *     ssl_certificate_key  www.example.com.key;
     *  <p>
     *  okay (in nginx) for key to be null if certificate contains both as per setup at
     *  http://nginx.org/en/docs/http/configuring_https_servers.html
     *  <p>
     *  proxy object can be set on nginx instance to apply site-wide,
     *  and to put multiple servers in the certificate file
     *  <p>
     *  the brooklyn entity will install the certificate/key(s) on the server.
     *  (however it will not currently merge multiple certificates.
     *  if conflicting certificates are attempted to be installed nginx will complain.) 
     */
    String certificate, key;

    /** whether the downstream server (if mapping) also expects https; default false */
    boolean targetIsSsl = false;

    /** whether to reuse SSL validation in the server (performance).
     * corresponds to nginx setting: proxy_ssl_session_reuse on|off */
    boolean reuseSessions = false;

    
    // autogenerated hash code and equals; nothing special required
    
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result
                + ((certificate == null) ? 0 : certificate.hashCode());
        result = prime * result + ((key == null) ? 0 : key.hashCode());
        result = prime * result + (reuseSessions ? 1231 : 1237);
        result = prime * result + (targetIsSsl ? 1231 : 1237);
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        ProxySslConfig other = (ProxySslConfig) obj;
        if (certificate == null) {
            if (other.certificate != null)
                return false;
        } else if (!certificate.equals(other.certificate))
            return false;
        if (key == null) {
            if (other.key != null)
                return false;
        } else if (!key.equals(other.key))
            return false;
        if (reuseSessions != other.reuseSessions)
            return false;
        if (targetIsSsl != other.targetIsSsl)
            return false;
        return true;
    }

}
